#문제1
a = [1,2,3]
b = [1,2,3]
print(a is b)
#is는 동일한 객체인지를 판별하지 리스트에 있는 값이 같은지는 상관쓰지 않는다.

#문제2
n = [1,2,3]
m = n
print(n is m)
#m = n 이라고 했으니까 m은 n과 같은 주소 값을 가지게 된다.
#그리고 n과 m은 동일한 객체이므로 True를 반환한다.

#문제3
i = j = [1,2,3]
i[1] = 4
print(j)
#i와 j변수는 동일한 리스트 객체를 가르키고 있으므로 i의 값을 바꾸면 j의 값도 변한다.

#문제4
o = [1,2,3]
p = o[:]
print(o is p)
#변수 o는 리스트를 가지고 있는 변수이다. 그러나 변수 P는 o의 리스트 값을 복사했지만,
#p는 o를 가르키고 있지 않고 o와 p는 서로 다른 객체이므로 False를 반환한다.

#문제5
l = [1,2,3]
u = l[:]
l[1] = 4
print(u)
"""
l변수의 인덱스1의 값을 4로 바꾸고 l을 출력하면 1,4,3이 출력될 것이다.
변수 u는 l의 인덱스가 바뀌기 전에 복사하였고 서로 다른 객체이므로 l의 1번째 인덱스 값을
바꿔도 u의 인덱스 값이 바뀌지는 않는다.
"""

#문제6
"""
+기호만을 사용하면 +를 하기 전과 +를 한 후의 주소 값이 다른 것을 확인할 수 있다. (id(변수))
이렇게 +를 사용하면 리스트 값이 변하는게 아니라 두 개의 리스트가 더해져서 새로운 주소 값을 갖는
새로운 리스트가 만들어지는 걸 알 수 있다.
extend를 사용하게되면 extend하기 전과 extend한 후의 주소 값이 같은 것을 확인할 수 있다.
"""

#문제7
t = [1, [2, 3], 4]
y = t[:]
t[1][0] = 5
print(y)
"""
t와 y는 서로 다른 객체이지만 t와 y는 둘 다[2, 3]를 포함하고 있고 서로 같은 곳을 바라보는 객체이다.
그러므로 t의 리스트 값을 변경하면 y가 포함하고 있는 리스트 값도 변경 된다.
"""